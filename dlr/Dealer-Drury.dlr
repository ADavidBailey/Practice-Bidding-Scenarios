# Dealer Drury

generate 10000000

produce 500

dealer south



# Reverse Drury


# Define pesky opps e/w distributions and HCP.  We donâ€™t want them mucking up our auctions
#Import,https://github.com/ADavidBailey/Practice-Bidding-Scenarios/blob/main/-Script-Calm-Opponents

##### Imported Script: Define Calm Opponents #####

# Avoid concentration of values
cce = top4(east,clubs)<2
cde = top4(east,diamonds)<2
che = top4(east,hearts)<2
cse = top4(east,spades)<2
noConEast = cce and cde and che and cse

ccw = top4(west,clubs)<2
cdw = top4(west,diamonds)<2
chw = top4(west,hearts)<2
csw = top4(west,spades)<2
noConWest = ccw and cdw and chw and csw

unbalEast = shape(east,xxxx -any 8xxx -any 7xxx -any 6xxx -any 55xx)
unbalWest = shape(west,xxxx -any 8xxx -any 7xxx -any 6xxx -any 55xx)

balEast   = shape(east,any 4333 +any 4432)
balWest   = shape(west,any 4333 +any 4432)

calmEast = (unbalEast and noConEast and hcp(east)<8) or (balEast and hcp(east)<12)
calmWest = (unbalWest and noConWest and hcp(west)<8) or (balWest and hcp(west)<12)
calmOpps = calmEast and calmWest

##### End of Imported Script: Define Calm Opponents #####

notNT = not (shape(north, any 4333 +any 4432 +any 5332) and hcp(north)>14 and hcp(north)<18)

# South passes
hand1  = shape(south,xxxx-any 9xxx-any 8xxx-any 7xxx-any 6xxx-any 65xx-any 55xx) and hcp(south)<12
hand2  = shape(south,xxx6) and hcp(south)<11
sPasses = hand1 or hand2

# Define North's opening major
nSpades = spades(north)>4 and hearts(north)<5
nHearts = hearts(north)>4 and spades(north)<5
nMajor  = nSpades or nHearts

# Define South's new suit for response and for initial pass
sD5  = diamonds(south)==5 and top3(south,diamonds)>1
sH5  = hearts(south)  ==5 and top3(south,hearts)  >1
new5 = sD5 or sH5
new6 = clubs(south)   ==6 and top3(south,clubs)>1

# Define South's 3- or 4-card support
s3cards = (nSpades and spades(south)==3) or (nHearts and hearts(south)==3)
s4cards = (nSpades and spades(south)>3)  or (nHearts and hearts(south)>3)
sSupport = s3cards or s4cards

# Define South's Fit Jumps
fjC  = clubs(south)   >4 and top3(south,clubs)>1
fjD  = diamonds(south)>4 and top3(south,diamonds)>1
fjH  = hearts(south)  >4 and top3(south,hearts)>1 and nSpades
fjSuit = fjC or fjD or fjH

# Define South's Support Points (sPoints)
v1 = shape(south, any 0xxx) ? 5 : 0 // allow for 2 voids
v2 = shape(south, any 00xx) ? 5 : 0
s1 = shape(south, any 1xxx) ? 3 : 0 // allow for 2 singletons
s2 = shape(south, any 11xx) ? 3 : 0
d1 = shape(south, any 2xxx) ? 1 : 0 // allow for 3 doubletons
d2 = shape(south, any 22xx) ? 1 : 0
d3 = shape(south, any 222x) ? 1 : 0
shortSuitPoints = v1+v2+s1+s2+d1+d2+d3
sPoints = sSupport ? shortSuitPoints + hcp(south) : hcp(south)

singleton = shape(south,any 1xxx)
void      = shape(south,any 0xxx)
spadeSuit = spades(south)>3
noSupport = not sSupport

# Define responses
fitJump    = sPoints>7               and s4cards   and fjSuit
raise      = sPoints>3 and sPoints<8 and sSupport
splinter1  = sPoints>11              and sSupport  and singleton and not (fitJump)
splinter0  = sPoints>11              and sSupport  and void      and not (fitJump)
drury      = sPoints>7               and sSupport                and not (fitJump or raise or splinter1 or splinter0)
DorHs      = hcp(south)>9            and noSupport and new5
Csuit      = hcp(south)>7            and noSupport and new6
oneSp      = hcp(south)>5            and noSupport and spadeSuit and not (new5 or new6)
nt         = hcp(south)>5            and noSupport               and not (new5 or new6 or oneSp)

pass      = not (fitJump or raise or splinter1 or splinter0 or drury or DorHs or Csuit or oneSp or nt)
 
nOpens = nMajor and hcp(north)>11 and hcp(north)<20 and notNT and shape(north,any 6xxx+any 5xxx-any 65xx-any 55xx)

### Imported Leveling Code ###
c1 = hascard(west,2C)
c2 = hascard(east,2D)
c3 = hascard(west,3C)
c4 = hascard(east,3D)

keep06 = c1 and c2          // this is used later w/c3 & c4 expressions
keep44 = c3 or c4           // this is used later w/c1 & c2 expressions

keep015 = keep06 and c3
keep03 = keep06 and keep44
keep045 = keep06 and not c3
####06 = c1 and c2
keep11 = c1 and keep44
keep14 = c1 and not keep44
keep19 = c1 and not c2
keep25 = c1
keep30 = keep06 or c3
keep33 = c1 or (c2 and keep44)
####44 = c3 or c4
keep47 = keep44 or keep06

keep53 = not keep47
keep56 = not keep44
keep67 = not keep33
keep70 = not keep30
keep75 = not keep25
keep81 = not keep19
keep86 = not keep14
keep89 = not keep11
keep94 = not keep06
keep955 = not keep045
keep97 = not keep03
keep985 = not keep015
keep   = 1
keep0  = 0
### See -Stats-Leveling for statistics on these values ###
### Example of how to generate Statistics for Leveling ###

# Define leveling
lev1 = fitJump   and keep
lev2 = raise     and keep06
lev3 = splinter1 and keep25
lev4 = splinter0 and keep
lev5 = drury     and keep03
lev6 = DorHs     and keep56
lev7 = Csuit     and keep
lev8 = oneSp     and keep0
lev9 = nt        and keep0
lev0 = pass      and keep0
levelTheDeal  = lev1 or lev2 or lev3 or lev4 or lev5 or lev6 or lev7 or lev8 or lev9 or lev0

# Now do it
sPasses and nOpens and calmOpps


and levelTheDeal

action
#printoneline, 
average "fit jump   8+  sPts 4+fit  2nd suit " 100 * fitJump,
average "raise      4-7 sPts 3+fit           " 100 * raise,
average "splinter1  12+ sPts 3+fit  singleton" 100 * splinter1,
average "splinter0  12+ sPts 3+fit  void     " 100 * splinter0,
average "drury      8+  sPts 3+fit           " 100 * drury,
average "2D/2H      10+ hcp  no fit good suit" 100 * DorHs,
average "3C         8+  hcp  no fit good suit" 100 * Csuit,
average "1S         6+  hcp  no fit 4+S      " 100 * oneSp,
average "1N         6+  hcp  no fit          " 100 * nt,
average "Pass                                " 100 * pass,
frequency "Support Points" (sPoints,0,16),

/*
fit jump   8+  sPts 4+fit  2nd suit : 10.5
raise      4-7 sPts 3+fit           : 7.3
splinter1  12+ sPts 3+fit  singleton: 17.3
splinter0  12+ sPts 3+fit  void     : 2.4
drury      8+  sPts 3+fit           : 20.9
2D/2H      10+ hcp  no fit good suit: 22.3
3C         8+  hcp  no fit good suit: 19.4
1S         6+  hcp  no fit 4+S      : 0
1N         6+  hcp  no fit          : 0
Pass                                : 0
*/


printpbn
