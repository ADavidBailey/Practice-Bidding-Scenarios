# button-text: Trap Pass?
# scenario-title: Trap Passï¼ŒMaybe
# Trap_Pass_Maybe
dealer south


# auction-filter: Auction.....\\n1[CDHS] [1-4][CDHS] 

##### Imported Script -- Predict Opening 1-Bid #####

# Changed to use gibNT 3/30/2025

# GIB opens 1N w/15-17 HCP or 15-16 and a 5-card major
ntP = hcp(south) + shape(south,5xxx+x5xx)
nt1 = shape(south, any 5332+any 4432+any 4333) and hcp(south)>14 and ntP<18

# GIB does not open with 5422 and a 5-card major
# GIB does not open with 5422 and the strength to reverse
nt2 = shape(south, 4252+4225+2452+2425+2254+2245) and hcp(south)>14 and hcp(south)<17

gibNT = nt1 or nt2

# Calculate length points for South (lengthPoints)
lp1 = spades(south)>4 ? spades(south)-4 : 0
lp2 = hearts(south)>4 ? hearts(south)-4 : 0
lp3 = diamonds(south)>4 ? diamonds(south)-4 : 0
lp4 = clubs(south)>4 ? clubs(south)-4 : 0
lengthPoints = lp1 + lp2 + lp3 + lp4

# Define suit points for south (suitPoints)
suitPoints = hcp(south) + lengthPoints

TwoNtShape = shape(south, any 4333 +any 4432 +any 5332 +any 5422)

# Define ntPoint ranges
oneNT   = gibNT
twoNT   = TwoNtShape and hcp(south)>19 and hcp(south)<22
threeNT = TwoNtShape and hcp(south)>24 and hcp(south)<28

# Define Game Forcing 2C
case1 = hcp(south)>21
case2 = hcp(south)>18 and losers(south)<5 and (spades(south)>5 or hearts(south)>5)
case3 = hcp(south)>18 and losers(south)<4 and (diamonds(south)>5 or clubs(south)>5)
gameForce2C = (case1 or case2 or case3) and not threeNT

### Predict South's opening BID
P1 = gameForce2C
P2 = P1 or threeNT or twoNT or oneNT

# Predict South's Opening suit
s = spades(south)
h = hearts(south)
d = diamonds(south)
c = clubs(south)
s1Range = suitPoints>11 and hcp(south)>9
oS = s>4 and s>=h and s>=d and s>=c and s1Range and not P2
oH = not oS and h>4 and h>=d and h>=c and s1Range and not P2
oD = not (oS or oH) and ((d>3 and d>=c) or c<3) and s1Range and not P2
oC = not (oS or oH or oD) and s1Range and not P2
openingSuit = (oS or oH or oD or oC)
oneSpade   = oS
oneHeart   = oH
oneDiamond = oD
oneClub    = oC

##### End of Imported Script -- Predict Opening 1-Bid #####
# Defines oneClub, oneDiamond, oneHeart, oneSpade, s, h, d, c


# North does not have a fit with South (avoid raise) and North is short in West's suit
# and West is NOT short in North's suit (avoid X)
s1S = oneSpade   and spades(north)<3   and spades(west)>2
s1H = oneHeart   and hearts(north)<3   and hearts(west)>2
s1D = oneDiamond and diamonds(north)<3 and diamonds(west)>2
s1C = oneClub    and clubs(north)<3    and clubs(west)>2
sOpens = (s1S or s1H or s1D or s1C) and shape(south,any 5431 any 5440) and hcp(south)>11 and hcp(south)<15

# Calculate South's Rank
sRS = s1S ? 4 : 0
sRH = s1H ? 3 : 0
sRD = s1D ? 2 : 0
sRC = s1C ? 1 : 0
southRank = sRS+sRH+sRD+sRC   // all except one are zero

# Determine West's longest suit
sw = spades(west)
hw = hearts(west)
dw = diamonds(west)
cw = clubs(west)
wS = sw>=hw and sw>=dw and sw>=cw
wH = not wS and hw>=dw and hw>=cw
wD = not wS and not wH and dw>=cw
wC = not wS and not wH and not wD

# Calculate West's Rank
wRS = wS ? 4 : 0
wRH = wH ? 3 : 0
wRD = wD ? 2 : 0
wRC = wC ? 1 : 0
westRank = wRS+wRH+wRD+wRC   // all except one are zero

rankOK = westRank<southRank  // force a 2-level overcall

# West has a good suit, North has a stack, and South has a take-out double
w1S = wS and top3(west,spades)==2   and spades(north)==5   and top5(north,spades)==3
w1H = wH and top3(west,hearts)==2   and hearts(north)==5   and top5(north,hearts)==3
w1D = wD and top3(west,diamonds)==2 and diamonds(north)==5 and top5(north,diamonds)==3
w1C = wC and top3(west,clubs)==2    and clubs(north)==5    and top5(north,clubs)==3
wGoodSuitNorthStack = (w1S or w1H or w1D or w1C) and shape(south,any 5431 any 5440)

# West has a good suit and North does NOT have a stack
w2S = wS and top3(west,spades)==2
w2H = wH and top3(west,hearts)==2
w2D = wD and top3(west,diamonds)==2
w2C = wC and top3(west,clubs)==2
wGoodSuitNorthNoStack = (w2S or w2H or w2D or w2C)

wRangeAndShape = hcp(west)>11 and hcp(west)<15 and shape(west,any 6xxx +any 5xxx -any 65xx -any 55xx)
wOvercallTrap = wGoodSuitNorthStack   and wRangeAndShape and hcp(north)>9
wOvercallWeak = wGoodSuitNorthNoStack and wRangeAndShape and hcp(north)<10

wOvercalls = rankOK and wRangeAndShape and (wOvercallTrap or wOvercallWeak)

# East is quiet
eQuiet = shape(east,xxxx-any 7xxx -any 6xxx) and hcp(east)<9

# Define leveling
### Imported Leveling Code ###
c1 = hascard(west,2C)
c2 = hascard(east,2D)
c3 = hascard(west,3C)
c4 = hascard(east,3D)

keep06 = c1 and c2          // this is used later w/c3 & c4 expressions
keep44 = c3 or c4           // this is used later w/c1 & c2 expressions

keep015 = keep06 and c3
keep03 = keep06 and keep44
keep045 = keep06 and not c3
####06 = c1 and c2
keep11 = c1 and keep44
keep14 = c1 and not keep44
keep19 = c1 and not c2
keep25 = c1
keep30 = keep06 or c3
keep33 = c1 or (c2 and keep44)
####44 = c3 or c4
keep47 = keep44 or keep06

keep53 = not keep47
keep56 = not keep44
keep67 = not keep33
keep70 = not keep30
keep75 = not keep25
keep81 = not keep19
keep86 = not keep14
keep89 = not keep11
keep94 = not keep06
keep955 = not keep045
keep97 = not keep03
keep985 = not keep015
keep   = 1
keep0  = 0
### End of Imported Leveling Code ###


lWeakPass = wOvercallWeak and keep015 and hascard(north,4C)
lTrapPass = wOvercallTrap and keep
levelTheDeal = lWeakPass or lTrapPass

# Now do it
sOpens and wOvercalls and eQuiet
and levelTheDeal

action
average "Trap Pass" 100 * wOvercallTrap,
average "Weak Pass" 100 * wOvercallWeak,


printpbn
